<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)bin\Debug\InfoHub.Entity.dll" #>
<#@ assembly name="$(ProjectDir)bin\Debug\InfoHub.ORM.dll" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.11.0" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="Microsoft.VisualStudio.Shell" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ include file="Manager.ttinclude"#>
<# 
	var manager = Manager.Create(Host, GenerationEnvironment); 
	GenerateFiles(manager);
#>
<#+
	void GenerateFiles(Manager manager)
	{
		var asm = Assembly.GetAssembly(typeof(InfoHub.Entity.Models.BaseEntity));
		var types = asm.GetTypes().Where(type=>!type.GetCustomAttributes(typeof(InfoHub.ORM.Attributes.UnmappedAttribute), true).Any());

		foreach (var type in types.Where(t=>t.IsClass && typeof(InfoHub.Entity.Interfaces.IEntity).IsAssignableFrom(t) 
		&& t!=typeof(InfoHub.Entity.Models.BaseEntity)))
		{
			GenerateFile(manager, type);
		}

		manager.Process(true); 
	}
	
	void GenerateFile(Manager manager, Type type)
	{
		manager.StartNewFile(type.Name + ".generated.cs"); 
#>
using InfoHub.Infrastructure.Security.Helpers;
using InfoHub.ORM.Attributes;

namespace InfoHub.Entity.Entities
{	
	public partial class <#= type.Name #> 
	{
<#+
	var encryptedProps = type.GetProperties().Where(prop=>prop.GetCustomAttributes(typeof(InfoHub.ORM.Attributes.EncryptedAttribute), true).Any());
	foreach(var prop in encryptedProps)
	{
		var propName = prop.Name.Replace("Encrypted", "");
		var propType = prop.PropertyType;
		var encName = prop.Name;
#>
		[Unmapped]
		public <#=propType#> <#=propName#>
		{ 
			get { return <#=prop.Name#>.Decrypt(); }
			set { <#=prop.Name#> = value.Decrypt(); }
		}

<#+
	}
#>
	}
}
<#+		manager.EndBlock();
		manager.StartNewFile(type.Name + ".hbm.xml"); 
#>
<?xml version="1.0" encoding="utf-8" ?>
<hibernate-mapping xmlns="urn:nhibernate-mapping-2.2" namespace="InfoHub.Entity.Entities" assembly="InfoHub.Entity">
	<class name="<#=type.Name#>" table="<#=type.Name#>">
	</class>
</hibernate-mapping>
<#+		manager.EndBlock();
	}	
#>